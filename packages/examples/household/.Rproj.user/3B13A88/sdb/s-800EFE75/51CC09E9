{
    "contents" : "#synthesize_hh.r\n#===============\n\n# DEFINE FUNCTION TO CALCULATE AGE PROBABILITIES BY HOUSEHOLD TYPE\n#=================================================================\n#' Calculate age probabilities by household type.\n#'\n#' \\code{calcAgeProbByHhType} calculates for each age group, the probability\n#' that a person is the age category is found in each of the household types.\n#'\n#' This function tabulates the proportions of persons in each of six age groups\n#' residing in each of several hundred household types. The six age groups are 0\n#' to 14 years, 15 to 19 years, 20 to 29 years, 30 to 54 years, 55 to 64 years,\n#' and 65 or more years. Household types are distinguished by the number of\n#' people in each of the age groups in the household. Census Public Use\n#' Microsample (PUMS) data for the region are used for the tabulation. Both the\n#' person table and the housing unit tables are used. Only the SERIALNO and AGE\n#' fields of the person table are used. Only the SERIALNO and HWEIGHT fields of\n#' the housing unit table are used. The SERIALNO field is used to relate persons\n#' to housing units. After persons are categorized by age group, they are joined\n#' together in their respective households. Vacant housing units are removed and\n#' households are categorized by the number of persons in each of the age\n#' groups. Typically this will result in many hundreds of household types. The\n#' total weighted persons by age category are summed by household type. The\n#' HWEIGHT field is used to weight the number of persons in each household. The\n#' number of household types is reduced by selecting the household types that\n#' account for the large majority of households. By default, the threshold is\n#' set to select household types which account for 0.99 of all households. This\n#' reduces the number of household types to a few hundred. The threshold\n#' parameter (Threshold) can be changed to increase or reduce the number of\n#' selected households. After the household types have been selected, the\n#' function calculates for each age group, the portion of persons in the age\n#' group who are in each housing type. The result is a matrix where the rows\n#' correspond to housing types and the columns correspond to age groups. Each\n#' column sums to 1. The housing type names are the number of persons in each\n#' age group (in chronological order) concatenated with hyphens (e.g.\n#' 1-1-0-2-0-0).\n#'\n#' @param Prsn_df A data frame created from a PUMS person table. The columns of\n#'   the data frame must be the SERIALNO and AGE fields from the PUMS person\n#'   table and must use those names. The function will throw an error and stop\n#'   if those columns are not in the data frame. The function will also throw an\n#'   error and stop if any values are NA.\n#' @param Hh_df A data frame created from a PUMS housing unit table. The columns\n#'   of the data frame must be the SERIALNO and HWEIGHT fields from the PUMS\n#'   housing unit table and must use those names. The function will throw an\n#'   error and stop if those columns are not in the data frame. The function\n#'   will also throw an error and stop if any values are NA or negative.\n#' @param Threshold A scalar value greater than 0 and less than or equal to 1.\n#'   This parameter determines the threshold to use for eliminating household\n#'   types that account for a small portion of households. For example, the\n#'   default value of 0.99 will keep those household types that account for 99%\n#'   percent of households.\n#' @return A matrix where rows represent housing types and columns represent age\n#'   groups. The values are the proportions of persons in each age group found\n#'   in each household type. The sum of each column is 1.\n#' @examples\n#' \\dontrun{\n#' PumsPersons_df <- read.csv(system.file(\"extdata\", \"pums_person.csv\", package=\"hhage\"))\n#' PumsHousing_df <- read.csv(system.file(\"extdata\", \"pums_housing.csv\", package=\"hhage\"))\n#' HtProb_HtAp <- calcAgeProbByHhType(PumsPersons_df, PumsHousing_df)\n#' }\ncalcAgeProbByHhType <- function(Prsn_df, Hh_df, Threshold=0.99) {\n\n  # Check and process inputs\n  #-------------------------\n  # Check that minimum required fields exist\n  PrsnFields_vc <- c(\"SERIALNO\", \"AGE\")\n  HasPrsnFields_vc <- PrsnFields_vc %in% names(Prsn_df)\n  HhFields_vc <- c(\"SERIALNO\", \"HWEIGHT\")\n  HasHhFields_vc <- HhFields_vc %in% names(Hh_df)\n  if (any(!HasPrsnFields_vc) | any(!HasHhFields_vc)) {\n    Msg <- paste(\"Person file must have SERIALNO and AGE fields.\",\n                  \"Household file must have SERIALNO and HWEIGHT fields.\")\n    stop(Msg)\n  }\n  # Check that AGE and HWEIGHT have appropriate values\n  if (any(is.na(Hh_df$HWEIGHT))) {\n    stop(\"HWEIGHT in Hh_df has NA values.\")\n  }\n  if (any(Hh_df$HWEIGHT < 0)) {\n    stop(\"HWEIGHT in Hh_df has negative values.\")\n  }\n  if (any(is.na (Prsn_df$AGE))) {\n    stop(\"AGE in Prsn_df has NA values.\")\n  }\n  if (any(Prsn_df$AGE < 0)) {\n    stop(\"AGE in Prsn_df has negative values.\")\n  }\n  # Check that Threshold has appropriate value\n  if (!(Threshold > 0 & Threshold <= 1)) {\n    stop(\"Threshold must be greater than 0 and less than or equal to 1.\")\n  }\n  # Convert SERIALNO to character\n  Prsn_df$SERIALNO <- as.character(Prsn_df$SERIALNO)\n  Hh_df$SERIALNO <- as.character(Hh_df$SERIALNO)\n  # Remove housing records not associated with persons (i.e. vacant)\n  Hh_df <- Hh_df[Hh_df$SERIALNO %in% Prsn_df$SERIALNO, ]\n\n  # Calculate population proportions by household type\n  #---------------------------------------------------\n  # Assign number of persons by age category to each household\n  Ap <- c(\"Age0to14\", \"Age15to19\", \"Age20to29\", \"Age30to54\", \"Age55to64\",\n          \"Age65Plus\")\n  MaxAge <- max(Prsn_df$AGE)\n  AgeBreaks <- c(0, 14, 19, 29, 54, 64, MaxAge)\n  Prsn_df$AgeCat <- cut(Prsn_df$AGE, breaks=AgeBreaks, include.lowest=TRUE,\n                         right=TRUE, labels=Ap)\n  for (ap in Ap) {\n    NumAgeCatByHh_vc <- table(Prsn_df$SERIALNO[Prsn_df$AgeCat == ap])\n    Hh_df[[ap]] <- 0\n    Hh_df[[ap]][match(names(NumAgeCatByHh_vc), Hh_df$SERIALNO)] <-\n      NumAgeCatByHh_vc\n  }\n  # Remove infrequent household categories\n  Hh_df$HsldType <- apply(Hh_df[,Ap], 1, function(x) paste(x, collapse = \"-\"))\n  NumHh_Ht <- tapply(Hh_df$HWEIGHT, Hh_df$HsldType, sum)\n  PropHsld_Ht <- NumHh_Ht / sum(NumHh_Ht)\n  CumProp_Ht <- cumsum(rev(sort(PropHsld_Ht)))\n  Ht <- names(CumProp_Ht)[CumProp_Ht <= Threshold]\n  Hh_df <- Hh_df[Hh_df$HsldType %in% Ht, ]\n  # Calculate and return age proportions by HsldType\n  NumPrsn_HhAp <- as.matrix(sweep(Hh_df[, Ap], 1, Hh_df$HWEIGHT, \"*\"))\n  NumPrsn_HtAp <- apply(NumPrsn_HhAp, 2, function(x) {\n    tapply(x, Hh_df$HsldType, sum)[Ht]})\n  sweep(NumPrsn_HtAp, 2, colSums(NumPrsn_HtAp), \"/\")\n}\n\n# DEFINE FUNCTION TO SYNTHESIZE HOUSEHOLDS FROM COUNT OF PERSONS BY AGE GROUP\n#============================================================================\n#' Synthesize a set of households from count of persons by age group.\n#'\n#' \\code{createHhByAge} Creates a set of households to accommodate a population\n#' of persons by age group and reflects the household composition of the region.\n#'\n#' This function creates a set of households to accommodate a population of\n#' persons by age group, which also reflects the household composition of the\n#' region. The function works by creating an initial allocation of persons by age\n#' to household types using the matrix of probabilities created by the\n#' calcAgeProbByHhType function and then using an iterative proportional fitting\n#' (IPF) process to produce the final allocations. The IPF process is necessary\n#' because the household type probabilities by age group are calculated as though\n#' household type is a characteristic of individual persons, whereas household\n#' type is really a joint characteristic of multiple persons in the household.\n#' The number of persons allocated to each age group of a household type must be\n#' reconciled to be consistent with the definition of the household type. For\n#' example, consider the case of a household type defined as having 2 persons\n#' aged 0-14 and 2 persons aged 20-29. If 1000 persons ages 0-14 are allocated to\n#' that household type and 1200 persons aged 20-29 are also allocated, there\n#' would be an inconsistency in the number of households of that type (500 vs.\n#' 600 households). The algorithm uses the mean of the household estimates to\n#' determine the reconciled number of households of the type. It then calculates\n#' the corresponding reconciled population by age group. The difference in total\n#' population by age group between the input and the reconciled population is\n#' then reallocated to the households by type. These steps are repeated until the\n#' reconciled population of age group is within 0.1% of the input population for\n#' the corresponding age group (or until a maximum number of iterations\n#' transpires.)\n#'\n#' @param Prsn_Ap A named vector of the number of persons by age group. The names\n#'   must correspond to the age group names.\n#' @param HtProb_HtAp A matrix where rows represent housing types and columns\n#'   represent age groups. The values are the proportions of persons in each age\n#'   group found in each household type. The sum of each column is 1. The matrix\n#'   is created from Census PUMS data using calcAgeProbByHhType.\n#' @param MaxIter A scalar integer defining the maximum number of iterations of\n#'   the IPF to reconcile household composition and input population by age\n#'   group.\n#' @return A list of synthetic households having 7 components. Each component is\n#'   a vector where the each element is the value for a household. The first\n#'   component contains household ID numbers. The next 6 components contain the\n#'   numbers of persons in each of the 6 age groups (\"Age0to14\", \"Age15to19\",\n#'   \"Age20to29\", \"Age30to54\", \"Age55to64\",\"Age65Plus\").\ncreateHhByAge <- function(Prsn_Ap = c(Age0to14, Age15to19, Age20to29,\n                                      Age30to54, Age55to64, Age65Plus),\n                          HtProb_HtAp, MaxIter = 100) {\n  # Initialize\n  #-----------\n  Ap <- colnames(HtProb_HtAp)\n  Ht <- rownames(HtProb_HtAp)\n  # Place persons by age into household types by multiplying person vector\n  # by probabilities\n  Prsn_HtAp <- sweep(HtProb_HtAp, 2, Prsn_Ap, \"*\")\n  # Make table of factors to convert persons into households and vise verse\n  PrsnFactors_Ht_Ap <-\n    lapply(strsplit(Ht, \"-\"), function(x)\n      as.numeric(x))\n  PrsnFactors_HtAp <- do.call(rbind, PrsnFactors_Ht_Ap)\n  dimnames(PrsnFactors_HtAp) <- dimnames(Prsn_HtAp)\n  rm(PrsnFactors_Ht_Ap)\n\n  # Iterate until \"balanced\" set of households is created\n  #------------------------------------------------------\n  # Create vector to store convergence indicator\n  MaxDiff_ <- numeric(MaxIter)\n  for (i in 1:MaxIter) {\n    # Convert population into households\n    Hh_HtAp <- Prsn_HtAp / PrsnFactors_HtAp\n    Hh_HtAp[is.na(Hh_HtAp)] <- 0\n    # Resolve differences in household type estimates\n    # Do not include zero household estimates\n    ResolveHh_HtAp <- t(apply(Hh_HtAp, 1, function(x) {\n      if (sum(x > 0) > 1) {\n        x[x > 0] <- mean(x[x > 0])\n      }\n      x\n    }))\n    # Exit if the difference between the maximum estimate for each\n    # household type is not too different than the resolved estimate\n    # for each household type\n    MaxHh_Ht <- apply(Hh_HtAp, 1, max)\n    ResolveHh_Ht <- apply(ResolveHh_HtAp, 1, max)\n    Diff_Ht <- abs(MaxHh_Ht - ResolveHh_Ht)\n    PropDiff_Ht <- Diff_Ht / ResolveHh_Ht\n    if (all(PropDiff_Ht < 0.001))\n      break\n    MaxDiff_[i] <- max(PropDiff_Ht)\n    # Calculate the number of persons for mean households\n    ResolvePrsn_HtAp <- ResolveHh_HtAp * PrsnFactors_HtAp\n    # Convert the mean persons tabulation into probabilities\n    PrsnProb_HtAp <-\n      sweep(ResolvePrsn_HtAp, 2, colSums(ResolvePrsn_HtAp), \"/\")\n    # Calculate the difference in the number of persons by age category\n    PrsnDiff_Ap <- Prsn_Ap - colSums(ResolvePrsn_HtAp)\n    # Allocate extra persons to households based on probabilities\n    AddPrsn_HtAp <- sweep(PrsnProb_HtAp, 2, PrsnDiff_Ap, \"*\")\n    # Add to the persons in the mean households\n    Prsn_HtAp <- ResolvePrsn_HtAp + AddPrsn_HtAp\n    # Warn if exit loop because MaxIter reached\n    if (i == MaxIter) {\n      warning(\"No convergence of household synthesis after 100 iterations.\")\n    }\n  }\n\n  # Convert to synthetic households\n  #--------------------------------\n  # Calculate number of households by household type\n  Hh_Ht <- round(apply(ResolveHh_HtAp, 1, max))\n  # Calculate persons by age group and household type\n  Prsn_HtAp <- sweep(PrsnFactors_HtAp, 1, Hh_Ht, \"*\")\n  # Convert into a synthetic population of households\n  Hh_Hh <- rep(names(Hh_Ht), Hh_Ht)\n  Hh_Hh_Ap <- strsplit(Hh_Hh, \"-\")\n  Hh_Hh_Ap <- lapply(Hh_Hh_Ap, function(x)\n    as.numeric(x))\n  Hh_HhAp <- do.call(rbind, Hh_Hh_Ap)\n  colnames(Hh_HhAp) <- Ap\n  # Put in random order\n  Hh_HhAp <- Hh_HhAp[sample(1:nrow(Hh_HhAp), nrow(Hh_HhAp), replace = FALSE),]\n  # Calculate household size\n  HhSize_Hh <- rowSums(Hh_HhAp)\n  # Return a list with the household attributes\n  list(HhId = 1:nrow(Hh_HhAp), Age0to14 = Hh_HhAp[, \"Age0to14\"],\n       Age15to19 = Hh_HhAp[, \"Age15to19\"], Age20to29 = Hh_HhAp[, \"Age20to29\"],\n       Age30to54 = Hh_HhAp[, \"Age30to54\"], Age55to64 = Hh_HhAp[, \"Age55to64\"],\n       Age65Plus = Hh_HhAp[, \"Age65Plus\"], HhSize = HhSize_Hh)\n}\n\n# DEFINE FUNCTION TO BUILD MODEL\n#===============================\n#' Build the model object\n#'\n#' \\code{buildModel} Creates a RSPM model object to implement the household age model.\n#'\n#' The buildModel function creates a model object which can be applied in the RSPM framework. The calcAgeProbByHhType function is invoked to estimate a household probability table which represents the region. The user must put the required inputs in the \"inst/extdata\" directory. The table is added as a parameter to the model object. The createHhByAge function is\nbuildModel <- function() {\n  # Initialize list to store model components\n  Model_ls <- list()\n  # Estimate the matrix of age group probabilities\n  PrsnInput_df <- read.csv(\"inst/extdata/pums_person.csv\", as.is=TRUE)\n  HhInput_df <- read.csv(\"inst/extdata/pums_housing.csv\", as.is=TRUE)\n  HtProb_HtAp <- calcAgeProbByHhType(PrsnInput_df, HhInput_df)\n  # Add model parameters to list\n  Model_ls$HtProb_HtAp <- HtProb_HtAp\n  # Add model functions to list\n  Model_ls$Main <- createHhByAge\n  # Identify the geographic level to iterate over\n  Model_ls$RunBy <- \"Division\"\n  # Identify data to be loaded from data store\n  Model_ls$Get$Division <- c(\"Age0to14\", \"Age15to19\", \"Age20to29\", \"Age30to54\", \"Age55to64\",\n                      \"Age65Plus\")\n  # Identify data to store\n  Model_ls$Set$Household <- c(\"HhId\", \"Age0to14\", \"Age15to19\", \"Age20to29\", \"Age30to54\", \"Age55to64\",\n                       \"Age65Plus\", \"HhSize\")\n  # Return the model object\n  Model_ls\n}\nSynthesizeHh <- buildModel()\n\n",
    "created" : 1437338681997.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "243923227",
    "id" : "51CC09E9",
    "lastKnownWriteTime" : 1437353031,
    "path" : "~/Work/Projects/GreenSTEP_RSPM/New_Framework/Development/household/R/synthesize_hh.r",
    "project_path" : "R/synthesize_hh.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}