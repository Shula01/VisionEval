devtools::use_vignette("synthesize_hh_model_doc")
PrsnInput_df <- read.csv("inst/extdata/pums_person.csv", as.is=TRUE)
HhInput_df <- read.csv("inst/extdata/pums_housing.csv", as.is=TRUE)
HtProb1_HtAp <- calcAgeProbByHhType(PrsnInput_df, HhInput_df, Threshold=1)
HtProb2_HtAp <- calcAgeProbByHhType(PrsnInput_df, HhInput_df, Threshold=0.99)
calcAgeProbByHhType <- function(Prsn_df, Hh_df, Threshold=0.99) {
# Check and process inputs
#-------------------------
# Check that minimum required fields exist
PrsnFields_vc <- c("SERIALNO", "AGE")
HasPrsnFields_vc <- PrsnFields_vc %in% names(Prsn_df)
HhFields_vc <- c("SERIALNO", "HWEIGHT")
HasHhFields_vc <- HhFields_vc %in% names(Hh_df)
if (any(!HasPrsnFields_vc) | any(!HasHhFields_vc)) {
Msg <- paste("Person file must have SERIALNO and AGE fields.",
"Household file must have SERIALNO and HWEIGHT fields.")
stop(Msg)
}
# Check that AGE and HWEIGHT have appropriate values
if (any(is.na(Hh_df$HWEIGHT))) {
stop("HWEIGHT in Hh_df has NA values.")
}
if (any(Hh_df$HWEIGHT < 0)) {
stop("HWEIGHT in Hh_df has negative values.")
}
if (any(is.na (Prsn_df$AGE))) {
stop("AGE in Prsn_df has NA values.")
}
if (any(Prsn_df$AGE < 0)) {
stop("AGE in Prsn_df has negative values.")
}
# Check that Threshold has appropriate value
if (!(Threshold > 0 & Threshold <= 1)) {
stop("Threshold must be greater than 0 and less than or equal to 1.")
}
# Convert SERIALNO to character
Prsn_df$SERIALNO <- as.character(Prsn_df$SERIALNO)
Hh_df$SERIALNO <- as.character(Hh_df$SERIALNO)
# Remove housing records not associated with persons (i.e. vacant)
Hh_df <- Hh_df[Hh_df$SERIALNO %in% Prsn_df$SERIALNO, ]
# Calculate population proportions by household type
#---------------------------------------------------
# Assign number of persons by age category to each household
Ap <- c("Age0to14", "Age15to19", "Age20to29", "Age30to54", "Age55to64",
"Age65Plus")
MaxAge <- max(Prsn_df$AGE)
AgeBreaks <- c(0, 14, 19, 29, 54, 64, MaxAge)
Prsn_df$AgeCat <- cut(Prsn_df$AGE, breaks=AgeBreaks, include.lowest=TRUE,
right=TRUE, labels=Ap)
for (ap in Ap) {
NumAgeCatByHh_vc <- table(Prsn_df$SERIALNO[Prsn_df$AgeCat == ap])
Hh_df[[ap]] <- 0
Hh_df[[ap]][match(names(NumAgeCatByHh_vc), Hh_df$SERIALNO)] <-
NumAgeCatByHh_vc
}
# Remove infrequent household categories
Hh_df$HsldType <- apply(Hh_df[,Ap], 1, function(x) paste(x, collapse = "-"))
NumHh_Ht <- tapply(Hh_df$HWEIGHT, Hh_df$HsldType, sum)
PropHsld_Ht <- NumHh_Ht / sum(NumHh_Ht)
CumProp_Ht <- cumsum(rev(sort(PropHsld_Ht)))
Ht <- names(CumProp_Ht)[CumProp_Ht <= Threshold]
Hh_df <- Hh_df[Hh_df$HsldType %in% Ht, ]
# Calculate and return age proportions by HsldType
NumPrsn_HhAp <- as.matrix(sweep(Hh_df[, Ap], 1, Hh_df$HWEIGHT, "*"))
NumPrsn_HtAp <- apply(NumPrsn_HhAp, 2, function(x) {
tapply(x, Hh_df$HsldType, sum)[Ht]})
sweep(NumPrsn_HtAp, 2, colSums(NumPrsn_HtAp), "/")
}
PrsnInput_df <- read.csv("inst/extdata/pums_person.csv", as.is=TRUE)
HhInput_df <- read.csv("inst/extdata/pums_housing.csv", as.is=TRUE)
HtProb1_HtAp <- calcAgeProbByHhType(PrsnInput_df, HhInput_df, Threshold=1)
HtProb2_HtAp <- calcAgeProbByHhType(PrsnInput_df, HhInput_df, Threshold=0.99)
dim(HtProb1_HtAp)
dim(HtProb2_HtAp)
getwd()
nrow(HtProb1_HtAp)
ls()
rm(HhInput_df, HtProb1_HtAp, HtProb2_HtAp, PrsnInput_df)
head(HtProb1_HtAp)
getwd()
